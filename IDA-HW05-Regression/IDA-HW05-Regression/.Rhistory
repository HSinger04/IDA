#make the ordered factor 'condition' a character vector
d_cleaned <- as.data.frame(t(d_cleaned))
# package for convenience functions (e.g. ggplot2, dplyr, etc.)
library(tidyverse)
# package for this course
library(aida)
# package for Bayesian regression
library(brms)
# parallel execution of Stan code
options(mc.cores = parallel::detectCores())
# use the aida-theme for plotting
theme_set(theme_aida())
# global color scheme / non-optimized
project_colors = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# setting theme colors globally
scale_colour_discrete <- function(...) {
scale_colour_manual(..., values = project_colors)
}
scale_fill_discrete <- function(...) {
scale_fill_manual(..., values = project_colors)
}
# nicer global knitr options
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
cache = TRUE, fig.align = 'center')
data_MC_excerpt <- aida::data_MC_cleaned %>%
select(RT, block)
data_MC_excerpt
data_MC_summary <- data_MC_excerpt %>%
group_by(block) %>%
summarise(mean = mean(RT))
(data_MC_summary)
(`goNoGo-reaction`       <-  data_MC_summary[2,2]-data_MC_summary[3,2])
(`discrimination-goNoGo` <-  data_MC_summary[1,2]-data_MC_summary[2,2])
data_MC_excerpt <- data_MC_excerpt %>%
group_by(block) %>%
mutate(
grand_mean  = 1,
`goNoGo-reaction` = ifelse(block == "discrimination", -2/3, 1/3),
`discrimination-goNoGo` = ifelse(block == "reaction", 2/3, -1/3)
)
# leave out block col for matrix conversion since matrix values will be of
# type string instead of dbl otherwise
MC_matrix <- data_MC_excerpt[-2]
MC_matrix <- MC_matrix %>% as.matrix
input_MC <- MC_matrix[,2:4]
output_MC <- MC_matrix[,1]
samples <- aida::get_samples_regression_noninformative(input_MC, output_MC, n_samples=10000)
(samples %>%
pull("goNoGo-reaction") %>%
aida::summarize_sample_vector(., name="goNoGo-reaction"))
(samples %>%
pull("discrimination-goNoGo") %>%
aida::summarize_sample_vector(., name="discrimination-goNoGo"))
IDA_data_KoF <- read_csv('data_KoF-IDA-2020.csv') %>%
# discard practice trials
filter(type != "practice") %>%
mutate(
# add a 'condition' variable
condition = case_when(
type == "special" ~ "background check",
type == "main" ~ str_c("Condition ", condition),
TRUE ~ "filler"
) %>%
factor(
ordered = T,
levels = c(str_c("Condition ", c(0, 1, 6, 9, 10)), "background check", "filler")
)
) %>%
rename(correct_answer = correct)
IDA_data_KoF
#1
subject_error_rate <- IDA_data_KoF %>%
# look at each participant in fillers only
filter(condition == "filler") %>%
group_by(submission_id) %>%
# compute proportion of correct answers
summarise(
proportion_correct = mean(correct_answer == response),
outlier_subject = proportion_correct < 0.5
) %>%
arrange(proportion_correct) # keep only those who have TRUE boolean in proportion_correct
# keep only subjects who have a high enough subject_error_rate
d_cleaned <-
full_join(IDA_data_KoF, subject_error_rate, by = "submission_id" ) %>%
filter(outlier_subject == FALSE)
# Compute how many subjects were excluded
nrow(IDA_data_KoF) - nrow(subject_error_rate)
#2
before_cleanse <- nrow(d_cleaned)
d_cleaned <- d_cleaned %>%
filter(condition == "background check") %>%
mutate(
background_correct = correct_answer == response
) %>%
select(submission_id, vignette, background_correct) %>%
right_join(d_cleaned, by = c("submission_id", "vignette")) %>%
# keep only the main trials which have a correct corresponding background check
filter(type == "main" & background_correct == TRUE)
before_cleanse - nrow(d_cleaned)
IDA_data_KoF_plot <- IDA_data_KoF %>%
group_by(condition) %>%
summarise(num_condition = n()) %>%
mutate(proportion_condition = num_condition/nrow(IDA_data_KoF))
IDA_data_KoF_plot
d_cleaned %>%
# drop unused factor levels
droplevels() %>%
# get means and 95% bootstrapped CIs for each condition
group_by(condition) %>%
nest() %>%
summarise(
CIs = map(data, function(d) bootstrapped_CI(d$response == "TRUE"))
) %>%
unnest(CIs) %>%
# plot means and CIs
ggplot(aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.2)) +
ylim(0,1) +
ylab("") + xlab("") + ggtitle("Proportion of 'TRUE' responses per condition") +
theme(legend.position = "none") +
scale_fill_manual(values = project_colors)
#make the ordered factor 'condition' a character vector
d_cleaned <- as.data.frame(t(d_cleaned))
d_cleaned
#is.ordered(d_cleaned$condition)
#TODO: I thought they wanted to make sure condition is no longer ordered, but it was not in the first place. do you know what they want here?
d_relevant <- d_cleaned %>%
select(response, condition)
hypothesis(kingOfFrance_fit, "Intercept - conditionCondition6 = 0")
# package for convenience functions (e.g. ggplot2, dplyr, etc.)
library(tidyverse)
# package for this course
library(aida)
# package for Bayesian regression
library(brms)
# parallel execution of Stan code
options(mc.cores = parallel::detectCores())
# use the aida-theme for plotting
theme_set(theme_aida())
# global color scheme / non-optimized
project_colors = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# setting theme colors globally
scale_colour_discrete <- function(...) {
scale_colour_manual(..., values = project_colors)
}
scale_fill_discrete <- function(...) {
scale_fill_manual(..., values = project_colors)
}
# nicer global knitr options
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
cache = TRUE, fig.align = 'center')
data_MC_excerpt <- aida::data_MC_cleaned %>%
select(RT, block)
data_MC_excerpt
data_MC_summary <- data_MC_excerpt %>%
group_by(block) %>%
summarise(mean = mean(RT))
(data_MC_summary)
(`goNoGo-reaction`       <-  data_MC_summary[2,2]-data_MC_summary[3,2])
(`discrimination-goNoGo` <-  data_MC_summary[1,2]-data_MC_summary[2,2])
data_MC_excerpt <- data_MC_excerpt %>%
group_by(block) %>%
mutate(
grand_mean  = 1,
`goNoGo-reaction` = ifelse(block == "discrimination", -2/3, 1/3),
`discrimination-goNoGo` = ifelse(block == "reaction", 2/3, -1/3)
)
# leave out block col for matrix conversion since matrix values will be of
# type string instead of dbl otherwise
MC_matrix <- data_MC_excerpt[-2]
MC_matrix <- MC_matrix %>% as.matrix
input_MC <- MC_matrix[,2:4]
output_MC <- MC_matrix[,1]
samples <- aida::get_samples_regression_noninformative(input_MC, output_MC, n_samples=10000)
(samples %>%
pull("goNoGo-reaction") %>%
aida::summarize_sample_vector(., name="goNoGo-reaction"))
(samples %>%
pull("discrimination-goNoGo") %>%
aida::summarize_sample_vector(., name="discrimination-goNoGo"))
IDA_data_KoF <- read_csv('data_KoF-IDA-2020.csv') %>%
# discard practice trials
filter(type != "practice") %>%
mutate(
# add a 'condition' variable
condition = case_when(
type == "special" ~ "background check",
type == "main" ~ str_c("Condition ", condition),
TRUE ~ "filler"
) %>%
factor(
ordered = T,
levels = c(str_c("Condition ", c(0, 1, 6, 9, 10)), "background check", "filler")
)
) %>%
rename(correct_answer = correct)
IDA_data_KoF
#1
subject_error_rate <- IDA_data_KoF %>%
# look at each participant in fillers only
filter(condition == "filler") %>%
group_by(submission_id) %>%
# compute proportion of correct answers
summarise(
proportion_correct = mean(correct_answer == response),
outlier_subject = proportion_correct < 0.5
) %>%
arrange(proportion_correct) # keep only those who have TRUE boolean in proportion_correct
# keep only subjects who have a high enough subject_error_rate
d_cleaned <-
full_join(IDA_data_KoF, subject_error_rate, by = "submission_id" ) %>%
filter(outlier_subject == FALSE)
# Compute how many subjects were excluded
nrow(IDA_data_KoF) - nrow(subject_error_rate)
#2
before_cleanse <- nrow(d_cleaned)
d_cleaned <- d_cleaned %>%
filter(condition == "background check") %>%
mutate(
background_correct = correct_answer == response
) %>%
select(submission_id, vignette, background_correct) %>%
right_join(d_cleaned, by = c("submission_id", "vignette")) %>%
# keep only the main trials which have a correct corresponding background check
filter(type == "main" & background_correct == TRUE)
before_cleanse - nrow(d_cleaned)
IDA_data_KoF_plot <- IDA_data_KoF %>%
group_by(condition) %>%
summarise(num_condition = n()) %>%
mutate(proportion_condition = num_condition/nrow(IDA_data_KoF))
IDA_data_KoF_plot
d_cleaned %>%
# drop unused factor levels
droplevels() %>%
# get means and 95% bootstrapped CIs for each condition
group_by(condition) %>%
nest() %>%
summarise(
CIs = map(data, function(d) bootstrapped_CI(d$response == "TRUE"))
) %>%
unnest(CIs) %>%
# plot means and CIs
ggplot(aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.2)) +
ylim(0,1) +
ylab("") + xlab("") + ggtitle("Proportion of 'TRUE' responses per condition") +
theme(legend.position = "none") +
scale_fill_manual(values = project_colors)
#make the ordered factor 'condition' a character vector
d_cleaned <- as.data.frame(t(d_cleaned))
d_cleaned
#is.ordered(d_cleaned$condition)
#TODO: I thought they wanted to make sure condition is no longer ordered, but it was not in the first place. do you know what they want here?
d_relevant <- d_cleaned %>%
select(response, condition)
hypothesis(kingOfFrance_fit, "Intercept - conditionCondition6 = 0")
hypothesis(kingOfFrance_fit, "Intercept > conditionCondition1")
#make the ordered factor 'condition' a character vector
d_cleaned <- d_cleaned %>%
mutate(condition = as.character(condition))
# package for convenience functions (e.g. ggplot2, dplyr, etc.)
library(tidyverse)
# package for this course
library(aida)
# package for Bayesian regression
library(brms)
# parallel execution of Stan code
options(mc.cores = parallel::detectCores())
# use the aida-theme for plotting
theme_set(theme_aida())
# global color scheme / non-optimized
project_colors = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# setting theme colors globally
scale_colour_discrete <- function(...) {
scale_colour_manual(..., values = project_colors)
}
scale_fill_discrete <- function(...) {
scale_fill_manual(..., values = project_colors)
}
# nicer global knitr options
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
cache = TRUE, fig.align = 'center')
data_MC_excerpt <- aida::data_MC_cleaned %>%
select(RT, block)
data_MC_excerpt
data_MC_summary <- data_MC_excerpt %>%
group_by(block) %>%
summarise(mean = mean(RT))
(data_MC_summary)
(`goNoGo-reaction`       <-  data_MC_summary[2,2]-data_MC_summary[3,2])
(`discrimination-goNoGo` <-  data_MC_summary[1,2]-data_MC_summary[2,2])
data_MC_excerpt <- data_MC_excerpt %>%
group_by(block) %>%
mutate(
grand_mean  = 1,
`goNoGo-reaction` = ifelse(block == "discrimination", -2/3, 1/3),
`discrimination-goNoGo` = ifelse(block == "reaction", 2/3, -1/3)
)
# leave out block col for matrix conversion since matrix values will be of
# type string instead of dbl otherwise
MC_matrix <- data_MC_excerpt[-2]
MC_matrix <- MC_matrix %>% as.matrix
input_MC <- MC_matrix[,2:4]
output_MC <- MC_matrix[,1]
samples <- aida::get_samples_regression_noninformative(input_MC, output_MC, n_samples=10000)
(samples %>%
pull("goNoGo-reaction") %>%
aida::summarize_sample_vector(., name="goNoGo-reaction"))
(samples %>%
pull("discrimination-goNoGo") %>%
aida::summarize_sample_vector(., name="discrimination-goNoGo"))
IDA_data_KoF <- read_csv('data_KoF-IDA-2020.csv') %>%
# discard practice trials
filter(type != "practice") %>%
mutate(
# add a 'condition' variable
condition = case_when(
type == "special" ~ "background check",
type == "main" ~ str_c("Condition ", condition),
TRUE ~ "filler"
) %>%
factor(
ordered = T,
levels = c(str_c("Condition ", c(0, 1, 6, 9, 10)), "background check", "filler")
)
) %>%
rename(correct_answer = correct)
IDA_data_KoF
#1
subject_error_rate <- IDA_data_KoF %>%
# look at each participant in fillers only
filter(condition == "filler") %>%
group_by(submission_id) %>%
# compute proportion of correct answers
summarise(
proportion_correct = mean(correct_answer == response),
outlier_subject = proportion_correct < 0.5
) %>%
arrange(proportion_correct) # keep only those who have TRUE boolean in proportion_correct
# keep only subjects who have a high enough subject_error_rate
d_cleaned <-
full_join(IDA_data_KoF, subject_error_rate, by = "submission_id" ) %>%
filter(outlier_subject == FALSE)
# Compute how many subjects were excluded
nrow(IDA_data_KoF) - nrow(subject_error_rate)
#2
before_cleanse <- nrow(d_cleaned)
d_cleaned <- d_cleaned %>%
filter(condition == "background check") %>%
mutate(
background_correct = correct_answer == response
) %>%
select(submission_id, vignette, background_correct) %>%
right_join(d_cleaned, by = c("submission_id", "vignette")) %>%
# keep only the main trials which have a correct corresponding background check
filter(type == "main" & background_correct == TRUE)
before_cleanse - nrow(d_cleaned)
IDA_data_KoF_plot <- IDA_data_KoF %>%
group_by(condition) %>%
summarise(num_condition = n()) %>%
mutate(proportion_condition = num_condition/nrow(IDA_data_KoF))
IDA_data_KoF_plot
d_cleaned %>%
# drop unused factor levels
droplevels() %>%
# get means and 95% bootstrapped CIs for each condition
group_by(condition) %>%
nest() %>%
summarise(
CIs = map(data, function(d) bootstrapped_CI(d$response == "TRUE"))
) %>%
unnest(CIs) %>%
# plot means and CIs
ggplot(aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.2)) +
ylim(0,1) +
ylab("") + xlab("") + ggtitle("Proportion of 'TRUE' responses per condition") +
theme(legend.position = "none") +
scale_fill_manual(values = project_colors)
#make the ordered factor 'condition' a character vector
d_cleaned <- d_cleaned %>%
mutate(condition = as.character(condition))
d_cleaned
#is.ordered(d_cleaned$condition)
#TODO: I thought they wanted to make sure condition is no longer ordered, but it was not in the first place. do you know what they want here?
d_relevant <- d_cleaned %>%
select(response, condition)
head(d_relevant,5)
kingOfFrance_fit = brm(
formula = response ~ condition,
family = bernoulli(link = "logit"),  # use Bernoulli as likelihood function because condition is a binary variable
data = d_cleaned,
prior = prior(student_t(1, 0, 2), class = 'b'),
sample_prior = 'yes',
iter = 20000
)
summary(kingOfFrance_fit)$fixed[,c("l-95% CI", "Estimate", "u-95% CI")]
hypothesis(kingOfFrance_fit, "Intercept > conditionCondition1")
# TODO: intercept codes for condition0 right?
hypothesis(kingOfFrance_fit, "Intercept - conditionCondition6 = 0")
hypothesis(kingOfFrance_fit, "Intercept < conditionCondition6")
hypothesis(kingOfFrance_fit, "Intercept > conditionCondition6"
hypothesis(kingOfFrance_fit, "Intercept > conditionCondition6")
hypothesis(kingOfFrance_fit, conditionCondition6 = 0)
hypothesis(kingOfFrance_fit, "conditionCondition6 = 0")
hypothesis(kingOfFrance_fit, "conditionCondition6 = 0")
hypothesis(kingOfFrance_fit, "conditionCondition6=0")
hypothesis(kingOfFrance_fit, "conditionCondition1>0")
# TODO: intercept codes for condition0 right?
hypothesis(kingOfFrance_fit, "conditionCondition1 < 0")
# TODO: intercept codes for condition0 right?
